// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Better Auth
model Account {
    id         String @id @default(cuid())
    userId     String
    accountId  String
    providerId String

    accessToken           String?
    refreshToken          String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    idToken               String?
    password              String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([providerId, accountId])
}

model Session {
    id        String   @id @default(cuid())
    userId    String
    token     String   @unique
    expiresAt DateTime

    ipAddress String?
    userAgent String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    username        String?   @unique
    displayUsername String?
    email           String?   @unique
    emailVerified   Boolean   @default(false)
    image           String?
    accounts        Account[]
    sessions        Session[]
    posts           Post[]
    admin           Admin?
    customer        Customer?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Verification {
    id         String   @id @default(cuid())
    identifier String
    value      String   @unique
    expiresAt  DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([identifier, value])
}

model Admin {
    id          String  @id @default(cuid())
    firstName   String
    lastName    String
    phoneNumber String?
    userId      String  @unique
    user        User    @relation(fields: [userId], references: [id])
}

model Customer {
    id               String   @id @default(cuid())
    firstName        String
    lastName         String
    phoneNumber      String
    dateOfBirth      DateTime
    gender           String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    stripeCustomerId String?

    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
}
